/**
 * LoopBack Application
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';

import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';



import { Observable, from }                                        from 'rxjs';



import { CaseMessage } from '../model/caseMessage';


import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';





@Injectable()


export class CaseMessagesControllerService {


    protected basePath = 'http://127.0.0.1:3000';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }



    /**
     * 
     * 
     * @param filter 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    
    public caseMessagesGet(caseID: string, filter?: any, observe?: 'body', reportProgress?: boolean): Observable<Array<CaseMessage>>;
    public caseMessagesGet(caseID: string, filter?: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CaseMessage>>>;
    public caseMessagesGet(caseID: string, filter?: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CaseMessage>>>;
    public caseMessagesGet(caseID: string, filter?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
            
        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
     
        if (filter !== undefined && filter !== null) {        
            queryParameters = queryParameters.set('filter', <any>filter);        
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [ 'application/json' ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [];
        return this.httpClient.get(`${this.basePath}/companies/UNKNOWN/cases/${encodeURIComponent(String(caseID))}/messages`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }



    
    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    
    public caseMessagesPost(caseID: string, body?: CaseMessage, observe?: 'body', reportProgress?: boolean): Observable<CaseMessage>;
    public caseMessagesPost(caseID: string, body?: CaseMessage, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CaseMessage>>;
    public caseMessagesPost(caseID: string, body?: CaseMessage, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CaseMessage>>;
    public caseMessagesPost(caseID: string, body?: CaseMessage, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
    

        // Assemble the URL and the Request
        let url : string = `${this.basePath}/companies/UNKOWN/cases/${encodeURIComponent(String(caseID))}/messages`;
        let requestInit = {
            method: 'POST',
            headers: new Headers({
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            }),
            body: JSON.stringify(body)
        };

        // Send the request and package the response as an Observable
        return from(fetch(url, requestInit)
                    .then((response)=>{
                        if (response.ok) {
                            return response.json();
                        }
                        console.log(response);
                        throw new Error('The response was not ok');
                    })
        );
    }
}


