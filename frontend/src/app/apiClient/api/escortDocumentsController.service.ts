/**
 * LoopBack Application
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';

import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';



import { Observable }                                        from 'rxjs/';



import { EscortDocument }                                    from '../model/escortDocument';
import { Filter }                                            from '../model/filter';


import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';





@Injectable()


export class EscortDocumentsControllerService {


    protected basePath = 'http://127.0.0.1:3000';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }




    /**
     * 
     * 
     * @param escortID 
     * @param documentID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public escortsEscortIDDocumentsDocumentIDFileGet(escortID: string, documentID: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public escortsEscortIDDocumentsDocumentIDFileGet(escortID: string, documentID: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public escortsEscortIDDocumentsDocumentIDFileGet(escortID: string, documentID: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public escortsEscortIDDocumentsDocumentIDFileGet(escortID: string, documentID: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (escortID === null || escortID === undefined) {
            throw new Error('Required parameter escortID was null or undefined when calling escortsEscortIDDocumentsDocumentIDFileGet.');
        }
        if (documentID === null || documentID === undefined) {
            throw new Error('Required parameter documentID was null or undefined when calling escortsEscortIDDocumentsDocumentIDFileGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [];

        return this.httpClient.get(`${this.basePath}/escorts/${encodeURIComponent(String(escortID))}/documents/${encodeURIComponent(String(documentID))}/file`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                responseType: 'blob',
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param escortID 
     * @param documentID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public escortsEscortIDDocumentsDocumentIDGet(escortID: string, documentID: string, observe?: 'body', reportProgress?: boolean): Observable<EscortDocument>;
    public escortsEscortIDDocumentsDocumentIDGet(escortID: string, documentID: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EscortDocument>>;
    public escortsEscortIDDocumentsDocumentIDGet(escortID: string, documentID: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EscortDocument>>;
    public escortsEscortIDDocumentsDocumentIDGet(escortID: string, documentID: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (escortID === null || escortID === undefined) {
            throw new Error('Required parameter escortID was null or undefined when calling escortsEscortIDDocumentsDocumentIDGet.');
        }
        if (documentID === null || documentID === undefined) {
            throw new Error('Required parameter documentID was null or undefined when calling escortsEscortIDDocumentsDocumentIDGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.basePath}/escorts/${encodeURIComponent(String(escortID))}/documents/${encodeURIComponent(String(documentID))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param escortID 
     * @param documentID 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public escortsEscortIDDocumentsDocumentIDPatch(escortID: string, documentID: string, body?: EscortDocument, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public escortsEscortIDDocumentsDocumentIDPatch(escortID: string, documentID: string, body?: EscortDocument, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public escortsEscortIDDocumentsDocumentIDPatch(escortID: string, documentID: string, body?: EscortDocument, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public escortsEscortIDDocumentsDocumentIDPatch(escortID: string, documentID: string, body?: EscortDocument, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (escortID === null || escortID === undefined) {
            throw new Error('Required parameter escortID was null or undefined when calling escortsEscortIDDocumentsDocumentIDPatch.');
        }
        if (documentID === null || documentID === undefined) {
            throw new Error('Required parameter documentID was null or undefined when calling escortsEscortIDDocumentsDocumentIDPatch.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch(`${this.basePath}/escorts/${encodeURIComponent(String(escortID))}/documents/${encodeURIComponent(String(documentID))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param escortID 
     * @param filter 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public escortsEscortIDDocumentsGet(escortID: string, filter?: Filter, observe?: 'body', reportProgress?: boolean): Observable<Array<EscortDocument>>;
    public escortsEscortIDDocumentsGet(escortID: string, filter?: Filter, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<EscortDocument>>>;
    public escortsEscortIDDocumentsGet(escortID: string, filter?: Filter, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<EscortDocument>>>;
    public escortsEscortIDDocumentsGet(escortID: string, filter?: Filter, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (escortID === null || escortID === undefined) {
            throw new Error('Required parameter escortID was null or undefined when calling escortsEscortIDDocumentsGet.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (filter !== undefined && filter !== null) {
            queryParameters = queryParameters.set('filter', <any>filter);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.basePath}/escorts/${encodeURIComponent(String(escortID))}/documents`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param escortID 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public escortsEscortIDDocumentsPost(escortID: string, body?: EscortDocument, observe?: 'body', reportProgress?: boolean): Observable<EscortDocument>;
    public escortsEscortIDDocumentsPost(escortID: string, body?: EscortDocument, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EscortDocument>>;
    public escortsEscortIDDocumentsPost(escortID: string, body?: EscortDocument, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EscortDocument>>;
    public escortsEscortIDDocumentsPost(escortID: string, body?: EscortDocument, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (escortID === null || escortID === undefined) {
            throw new Error('Required parameter escortID was null or undefined when calling escortsEscortIDDocumentsPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post(`${this.basePath}/escorts/${encodeURIComponent(String(escortID))}/documents`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }



}


