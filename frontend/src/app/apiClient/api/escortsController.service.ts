/**
 * LoopBack Application
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';

import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';



import { Observable, from }                                        from 'rxjs';



import { Escort }                                            from '../model/escort';
import { Filter }                                            from '../model/filter';


import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { EscortLocation } from '..';
import { GPSPoint } from '../../controls/data.service';





@Injectable()


export class EscortsControllerService {


    protected basePath = 'http://127.0.0.1:3000';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param escortID 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public escortsEscortIDPatch(escortID: string, body?: Escort, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public escortsEscortIDPatch(escortID: string, body?: Escort, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public escortsEscortIDPatch(escortID: string, body?: Escort, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public escortsEscortIDPatch(escortID: string, body?: Escort, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (escortID === null || escortID === undefined) {
            throw new Error('Required parameter escortID was null or undefined when calling escortsEscortIDPatch.');
        }

        // Assemble the URL and the Request
        let url : string = `${this.basePath}/escorts/${encodeURIComponent(String(escortID))}`;
        let requestInit = {
            method: 'PATCH',
            headers: new Headers({
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            }),
            body: JSON.stringify(body)
        };

        // Send the request and package the response as an Observable
        return from(fetch(url, requestInit)
                    .then((response)=>{
                        if (response.ok) {
                            return response.json();
                        }
                        console.log(response);
                        throw new Error('The response was not ok');
                    })
        );
    }


    /**
     * 
     * 
     * @param filter 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public escortsGet(filter?: Filter, observe?: 'body', reportProgress?: boolean): Observable<Array<Escort>>;
    public escortsGet(filter?: Filter, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Escort>>>;
    public escortsGet(filter?: Filter, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Escort>>>;
    public escortsGet(filter?: Filter, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (filter !== undefined && filter !== null) {
            queryParameters = queryParameters.set('filter', JSON.stringify(filter));
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.basePath}/escorts`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


    /**
     * 
     * 
     * @param escortID
     * @param escortLocation
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */    
    public addEscortTrackingLocation(escortID : string, escortLocation : EscortLocation, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public addEscortTrackingLocation(escortID : string, escortLocation : EscortLocation, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public addEscortTrackingLocation(escortID : string, escortLocation : EscortLocation, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public addEscortTrackingLocation(escortID : string, escortLocation : EscortLocation, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (escortID === null || escortID === undefined || escortID.trim().length == 0) {
            throw new Error('Required parameter escortID was null or undefined when calling addEscortTrackingLocation.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [ 'application/json' ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        
        // to determine the Content-Type header
        const consumes: string[] = [ 'application/json' ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post(`${this.basePath}/escorts/${encodeURIComponent(String(escortID))}/tracking`,
            escortLocation,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


    /**
     * 
     * 
     * @param flightNumber
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */    
    public trackFlightLocation(flightNumber : string, observe?: 'body', reportProgress?: boolean): Observable<GPSPoint>;
    public trackFlightLocation(flightNumber : string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GPSPoint>>;
    public trackFlightLocation(flightNumber : string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GPSPoint>>;
    public trackFlightLocation(flightNumber : string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (flightNumber === null || flightNumber === undefined || flightNumber.trim().length == 0) {
            throw new Error('Required parameter flightNumber was null or undefined when calling trackFlightLocation.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [ 'application/json' ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        
        // to determine the Content-Type header
        const consumes: string[] = [ 'application/json' ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.get(`${this.basePath}/flight/${encodeURIComponent(String(flightNumber))}/tracking`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


}


