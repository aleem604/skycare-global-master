/**
 * LoopBack Application
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';

import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';



import { Observable, from }                                        from 'rxjs';



import { CaseEscortReceipt } from '../model/caseEscortReceipt';


import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';





@Injectable()


export class CaseEscortReceiptsControllerService {


    protected basePath = 'http://127.0.0.1:3000';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }









    /**
     * 
     * 
     * @param companyID 
     * @param caseID 
     * @param receiptID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public companiesCompanyIDCasesCaseIDEscortReceiptsReceiptIDFileDelete(companyID: string, caseID: string, receiptID: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public companiesCompanyIDCasesCaseIDEscortReceiptsReceiptIDFileDelete(companyID: string, caseID: string, receiptID: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public companiesCompanyIDCasesCaseIDEscortReceiptsReceiptIDFileDelete(companyID: string, caseID: string, receiptID: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public companiesCompanyIDCasesCaseIDEscortReceiptsReceiptIDFileDelete(companyID: string, caseID: string, receiptID: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (companyID === null || companyID === undefined) {
            throw new Error('Required parameter companyID was null or undefined when calling companiesCompanyIDCasesCaseIDEscortReceiptsReceiptIDFileDelete.');
        }
        if (caseID === null || caseID === undefined) {
            throw new Error('Required parameter caseID was null or undefined when calling companiesCompanyIDCasesCaseIDEscortReceiptsReceiptIDFileDelete.');
        }
        if (receiptID === null || receiptID === undefined) {
            throw new Error('Required parameter receiptID was null or undefined when calling companiesCompanyIDCasesCaseIDEscortReceiptsReceiptIDFileDelete.');
        }

        // Assemble the URL and the Request
        let url : string = `${this.basePath}/companies/${encodeURIComponent(String(companyID))}/cases/${encodeURIComponent(String(caseID))}/escortReceipts/${encodeURIComponent(String(receiptID))}/file`;
        let requestInit = {
            method: 'DELETE',
            headers: new Headers({
                'Accept': 'text/plain'
            })
        };

        // Send the request and package the response as an Observable
        return from(fetch(url, requestInit)
                    .then((response)=>{
                        if (response.ok) {
                            // HTTP DELETE will not return anything (204 - No Content), so return true
                            return true;
                        }
                        console.log(response);
                        throw new Error('The file DELETE response was not ok');
                    })
        );
    }


    /**
     * 
     * 
     * @param companyID 
     * @param caseID 
     * @param receiptID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public companiesCompanyIDCasesCaseIDEscortReceiptsReceiptIDFileGet(companyID: string, caseID: string, receiptID: string, archivedCase?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public companiesCompanyIDCasesCaseIDEscortReceiptsReceiptIDFileGet(companyID: string, caseID: string, receiptID: string, archivedCase?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public companiesCompanyIDCasesCaseIDEscortReceiptsReceiptIDFileGet(companyID: string, caseID: string, receiptID: string, archivedCase?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public companiesCompanyIDCasesCaseIDEscortReceiptsReceiptIDFileGet(companyID: string, caseID: string, receiptID: string, archivedCase: boolean = false, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (companyID === null || companyID === undefined) {
            throw new Error('Required parameter companyID was null or undefined when calling companiesCompanyIDCasesCaseIDEscortReceiptsReceiptIDFileGet.');
        }
        if (caseID === null || caseID === undefined) {
            throw new Error('Required parameter caseID was null or undefined when calling companiesCompanyIDCasesCaseIDEscortReceiptsReceiptIDFileGet.');
        }
        if (receiptID === null || receiptID === undefined) {
            throw new Error('Required parameter receiptID was null or undefined when calling companiesCompanyIDCasesCaseIDEscortReceiptsReceiptIDFileGet.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        queryParameters = queryParameters.append('archivedCase', archivedCase.toString());

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [];

        return this.httpClient.get(`${this.basePath}/companies/${encodeURIComponent(String(companyID))}/cases/${encodeURIComponent(String(caseID))}/escortReceipts/${encodeURIComponent(String(receiptID))}/file`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                responseType: 'blob',
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


    /**
     * 
     * 
     * @param companyID 
     * @param caseID 
     * @param receiptID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public companiesCompanyIDCasesCaseIDEscortReceiptsReceiptIDGet(companyID: string, caseID: string, receiptID: string, observe?: 'body', reportProgress?: boolean): Observable<CaseEscortReceipt>;
    public companiesCompanyIDCasesCaseIDEscortReceiptsReceiptIDGet(companyID: string, caseID: string, receiptID: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CaseEscortReceipt>>;
    public companiesCompanyIDCasesCaseIDEscortReceiptsReceiptIDGet(companyID: string, caseID: string, receiptID: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CaseEscortReceipt>>;
    public companiesCompanyIDCasesCaseIDEscortReceiptsReceiptIDGet(companyID: string, caseID: string, receiptID: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (companyID === null || companyID === undefined) {
            throw new Error('Required parameter companyID was null or undefined when calling companiesCompanyIDCasesCaseIDEscortReceiptsReceiptIDGet.');
        }
        if (caseID === null || caseID === undefined) {
            throw new Error('Required parameter caseID was null or undefined when calling companiesCompanyIDCasesCaseIDEscortReceiptsReceiptIDGet.');
        }
        if (receiptID === null || receiptID === undefined) {
            throw new Error('Required parameter receiptID was null or undefined when calling companiesCompanyIDCasesCaseIDEscortReceiptsReceiptIDGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.basePath}/companies/${encodeURIComponent(String(companyID))}/cases/${encodeURIComponent(String(caseID))}/escortReceipts/${encodeURIComponent(String(receiptID))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param companyID 
     * @param caseID 
     * @param receiptID 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public companiesCompanyIDCasesCaseIDEscortReceiptsReceiptIDPatch(companyID: string, caseID: string, receiptID: string, body?: CaseEscortReceipt, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public companiesCompanyIDCasesCaseIDEscortReceiptsReceiptIDPatch(companyID: string, caseID: string, receiptID: string, body?: CaseEscortReceipt, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public companiesCompanyIDCasesCaseIDEscortReceiptsReceiptIDPatch(companyID: string, caseID: string, receiptID: string, body?: CaseEscortReceipt, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public companiesCompanyIDCasesCaseIDEscortReceiptsReceiptIDPatch(companyID: string, caseID: string, receiptID: string, body?: CaseEscortReceipt, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (companyID === null || companyID === undefined) {
            throw new Error('Required parameter companyID was null or undefined when calling companiesCompanyIDCasesCaseIDEscortReceiptsReceiptIDPatch.');
        }
        if (caseID === null || caseID === undefined) {
            throw new Error('Required parameter caseID was null or undefined when calling companiesCompanyIDCasesCaseIDEscortReceiptsReceiptIDPatch.');
        }
        if (receiptID === null || receiptID === undefined) {
            throw new Error('Required parameter receiptID was null or undefined when calling companiesCompanyIDCasesCaseIDEscortReceiptsReceiptIDPatch.');
        }

        // Assemble the URL and the Request
        let url : string = `${this.basePath}/companies/${encodeURIComponent(String(companyID))}/cases/${encodeURIComponent(String(caseID))}/escortReceipts/${encodeURIComponent(String(receiptID))}`;
        let requestInit = {
            method: 'PATCH',
            headers: new Headers({
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            }),
            body: JSON.stringify(body)
        };

        // Send the request and package the response as an Observable
        return from(fetch(url, requestInit)
                    .then((response)=>{
                        if (response.ok) {
                            return response.json();
                        }
                        console.log(response);
                        throw new Error('The response was not ok');
                    })
        );
    }

    /**
     * 
     * 
     * @param companyID 
     * @param caseID 
     * @param filter 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public companiesCompanyIDCasesCaseIDEscortReceiptsGet(companyID: string, caseID: string, filter?: any, observe?: 'body', reportProgress?: boolean): Observable<Array<CaseEscortReceipt>>;
    public companiesCompanyIDCasesCaseIDEscortReceiptsGet(companyID: string, caseID: string, filter?: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CaseEscortReceipt>>>;
    public companiesCompanyIDCasesCaseIDEscortReceiptsGet(companyID: string, caseID: string, filter?: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CaseEscortReceipt>>>;
    public companiesCompanyIDCasesCaseIDEscortReceiptsGet(companyID: string, caseID: string, filter?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (companyID === null || companyID === undefined) {
            throw new Error('Required parameter companyID was null or undefined when calling companiesCompanyIDCasesCaseIDEscortReceiptsGet.');
        }
        if (caseID === null || caseID === undefined) {
            throw new Error('Required parameter caseID was null or undefined when calling companiesCompanyIDCasesCaseIDEscortReceiptsGet.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (filter !== undefined && filter !== null) {
            queryParameters = queryParameters.set('filter', JSON.stringify(filter));
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.basePath}/companies/${encodeURIComponent(String(companyID))}/cases/${encodeURIComponent(String(caseID))}/escortReceipts`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param companyID 
     * @param caseID 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public companiesCompanyIDCasesCaseIDEscortReceiptsPost(companyID: string, caseID: string, body?: CaseEscortReceipt, observe?: 'body', reportProgress?: boolean): Observable<CaseEscortReceipt>;
    public companiesCompanyIDCasesCaseIDEscortReceiptsPost(companyID: string, caseID: string, body?: CaseEscortReceipt, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CaseEscortReceipt>>;
    public companiesCompanyIDCasesCaseIDEscortReceiptsPost(companyID: string, caseID: string, body?: CaseEscortReceipt, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CaseEscortReceipt>>;
    public companiesCompanyIDCasesCaseIDEscortReceiptsPost(companyID: string, caseID: string, body?: CaseEscortReceipt, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (companyID === null || companyID === undefined) {
            throw new Error('Required parameter companyID was null or undefined when calling companiesCompanyIDCasesCaseIDEscortReceiptsPost.');
        }
        if (caseID === null || caseID === undefined) {
            throw new Error('Required parameter caseID was null or undefined when calling companiesCompanyIDCasesCaseIDEscortReceiptsPost.');
        }

        // Assemble the URL and the Request
        let url : string = `${this.basePath}/companies/${encodeURIComponent(String(companyID))}/cases/${encodeURIComponent(String(caseID))}/escortReceipts`;
        let requestInit = {
            method: 'POST',
            headers: new Headers({
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            }),
            body: JSON.stringify(body)
        };

        // Send the request and package the response as an Observable
        return from(fetch(url, requestInit)
                    .then((response)=>{
                        if (response.ok) {
                            return response.json();
                        }
                        console.log(response);
                        throw new Error('The response was not ok');
                    })
        );
    }


}

